stages:
  - build
  - test

build_x86:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:x86_64-latest .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:x86_64-latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^Bump version/

build_arm:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --platform=linux/arm64 -t $CI_REGISTRY/$CI_PROJECT_PATH:arm64-latest .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:arm64-latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^Bump version/

test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH:x86_64-latest
    - docker run --rm $CI_REGISTRY/$CI_PROJECT_PATH:x86_64-latest npm test
